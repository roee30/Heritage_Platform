############################################################################
#                                                                          #
#                      The Sanskrit Heritage Platform                      #
#                                                                          #
#                         Gérard Huet & Pawan Goyal                        #
#                                                                          #
############################################################################
#TEMPLATE Makefile of SKT Platform      #DATE      Copyright Gérard Huet 2022 #
############################################################################
#WARN

# This software presupposes a Unix-like OS environment, with c, make and sed
# Also python is assumed for package management, and javascript for scripts.
# Stand-alone distribution ought to include Zen and Ocaml/Camlp4 distributions.
# Also Apache for managing the Web site. And TeX/Ocamlweb for documeentation.

############################ VERSIONING ####################################

# If you change VERSION/DATE: ./configure (triggering make version)
# and separately update lexicon version counter in Heritage.e
VERSION=#VERSION
# DATE ought to be of the form YYYY-MM-DD, consistently with ISO 8601
DATE=#DATE

# Sanskrit resources are defined at configuration time:
SKTRESOURCES=#SKTRESOURCES

DATA=$(SKTRESOURCES)DATA# morphological data, sandhi & verb tables
LOCAL_DATA=DATA # The transducers
HERITAGE=$(SKTRESOURCES)DICO# hypertext Heritage read-only
DICO=DICO# hypertext Heritage
BOOK=$(SKTRESOURCES)BOOK# Heritage.pdf abrevs.pdf
MW=$(SKTRESOURCES)MW# hypertext Monier-Williams
XMLDOC=$(SKTRESOURCES)XML# Heritage Sanskrit morphology in XML databases
# contains initially the dtds and the LICENCES, later filled by make xml_data
# This avoids burdening the git archive with huge compressed files.


# Path to global Sanskrit corpus downloaded from Git.
SKTCORPUS=$(SKTRESOURCES)CORPUS
# Path to the corpus in the server area.
SERVERCORPUS=$(SERVERPUBLICDIR)CORPUS
# Corpus is loaded in SERVERCORPUS at install time, by make releasecorpus
# Conversely, Corpus is exported in Resources at demand by make commit-corpus

# Macro to extract information from the Apache configuration.
apache_config_extract = $(shell apachectl -S | grep $(1) |		\
				cut -d ' ' -f 2 | cut -d '=' -f 2)

# User and group under which CGIs are executed.
APACHE_USER=$(call apache_config_extract,"User")
APACHE_GROUP=$(call apache_config_extract,"Group")

# Virtual path for make
VPATH=ML

# For change of make in all recursive Makefiles
MAKE=make
SHELL=/bin/sh

############### Distribution Parameterization Begin #########################

# Distribution licenses - depends on the packages selection
# LGPL distribution Kerala workshop 25-12-2011 Happy Christmas !
# LGPL distribution WSC Conference Bangkok 25-06-2015
# GitLab archive 15-04-2017
# SCL parser interface 02-06-2017

SOFT_LICENSE=ML/LICENSE # Free software license LGPL
#SOFT_LICENSE=LEGAL/UoH/LICENSE # University of Hyderabad distribution
DATA_LICENSE=$(XMLDOC)/LICENCES/LGPLLR.pdf
DATA_LICENSES=$(XMLDOC)/LGPLLR.pdf $(XMLDOC)/LGPLLR.tex $(XMLDOC)/LGPLLR.html
LICENSES=$(SOFT_LICENSE) $(DATA_LICENSE)

ML_COPYRIGHT=ML/COPYRIGHT
LEGAL=$(ML_COPYRIGHT) $(LICENSES)

CONFIGS=SETUP/CONFIGS SETUP/config_help.txt

# System installation
SYSTEM_SETUP=SETUP/version.txt SETUP/MMakefile SETUP/INSTALL $(CONFIGS) \
SETUP/issudo.sh SETUP/counter.py SETUP/zen.tar
SYSTEM_configure=configure
# currently disabled
SYSTEM_supplements=SETUP/TEX SETUP/wwwcount2.5.tar.gz

# General information
INFOS=README INSTALLATION

INRIA_IMAGES=IMAGES/icon_ocaml.png IMAGES/JoeCaml.png \
IMAGES/logo_inria.png # Copyright Inria
# W3C_IMAGES=IMAGES/valid-xhtml10.png # Copy W3C - obsolete
GH_IMAGES=IMAGES/smallyantra.gif IMAGES/Yantra.jpg IMAGES/favicon.ico \
IMAGES/apple-touch-icon-ipad-76x76.png \
IMAGES/apple-touch-icon-ipad-retina-152x152.png \
IMAGES/apple-touch-icon-iphone-60x60.png \
IMAGES/apple-touch-icon-iphone-retina-120x120.png # Copy GH
DOC_IMAGES=IMAGES/lexer10.jpg IMAGES/lexer17.jpg IMAGES/lexer40.jpg # Copy GH
# These gif images are various simplifications of the lexer automaton
# They were compiled by GraphViz from DOC/lexer10.dot lexer17.dot lexer40.dot
# NB. Use of gif vs others formats such as jpg is due to browser compatibility

# Scripts
SCRIPTS=JAVASCRIPT/utf82VH.js JAVASCRIPT/dragtable.js JAVASCRIPT/util.js

#Frequency files
FREQS=$(DATA)/comp_freq.rem $(DATA)/pada_freq.rem $(DATA)/word_freq.rem $(DATA)/comp_trans_freq.rem $(DATA)/pada_trans_freq.rem

# Next are copyright specific images
SITE_IMAGES=IMAGES/yinyang.gif IMAGES/panini.jpg IMAGES/spin-new.gif \
IMAGES/arrw01_06a.gif IMAGES/arrw01_16a.gif
TOP_IMAGES=IMAGES/sanskrit.gif IMAGES/borderl.jpg IMAGES/borderr.jpg
BACK_IMAGES=IMAGES/om.jpg IMAGES/om1.jpg IMAGES/om2.jpg IMAGES/om3.jpg IMAGES/om4.jpg
MISC_IMAGES=IMAGES/ganesh.gif IMAGES/ganesh.jpg IMAGES/jagannath.jpg \
IMAGES/hare.jpg IMAGES/ganeshgannath.jpg IMAGES/krishnagannath.jpg \
IMAGES/jagannath2.jpg IMAGES/sarasvati.jpg IMAGES/Panini2.jpg \
IMAGES/jaganyantra.png IMAGES/geopattern.gif IMAGES/vajra.jpg \
IMAGES/kaadambarii.png IMAGES/vajra.png

# Distributed images for mirror Web site
#IMAGES= # no image in distribution
IMAGES=$(INRIA_IMAGES) $(GH_IMAGES) $(SITE_IMAGES) $(TOP_IMAGES) \
$(BACK_IMAGES) $(DOC_IMAGES) $(MISC_IMAGES)

# Fonts for diacritics and devanagari - OBSOLETE
# diacritics: tim-iu.zip 'IndUni' font courtesy John Smith, Cambridge
# devanagari: it99otf.zip 'Sanskrit 99' font courtesy Ulrich Stiehl, Heidelberg
# FONTS=FONTS/tim-iu.zip FONTS/it99otf.zip

# Lexical databases
DIC_PDF=Heritage.pdf
DIC_HTML=Heritage.html #in 1 page! (used for Goldendict format translation)

############### Distribution Parameterization End #########################

####################### Customization Begin ###############################

# Installation parameters - Customize by ./configure in main dir
# according to the config file in SETUP dir
ZEN=#ZENDIR# Zen computational linguistics Ocaml library should be installed
PLATFORM=#PLATFORM# Computer or Station -- no blank character in such strings
# PLATFORM=Simputer# Amida Simputer handheld device - historical

TRANSLIT=#TRANSLIT# Transliteration scheme VH, KH or WX
LEXICON=#LEXICON# Lexicon toggle default
DISPLAY=#DISPLAY# Default display font deva or roma

# Main directory, where the sanskrit tools are installed
SKTINSTALLDIR=#SKTINSTALLDIR# To be set at configuration time

# Host name of the server - used only for installation message below
SERVERHOST=#SERVERHOST
# SERVERHOST=sanskrit.inria.fr# quincy sanskrit [official site]
# SERVERHOST=pauillac.inria.fr# pauillac
# SERVERHOST=213.41.153.152# dhruva gerardh.net1.nerim.net [legacy]

# For remote invocation of cgi services (eg Sanskrit Library)
REMOTESERVERHOST=https://sanskrit.inria.fr/# remote host Inria

# The SKT public http directory on the server
SERVERPUBLICDIR=#SERVERPUBLICDIR
# SERVERPUBLICDIR=/Users/huet/Sites/SKT/# amrita
# SERVERPUBLICDIR=/var/www/html/sanskrit/# quincy/sanskrit

# Its local URL on the server
SKTDIRURL=#SKTDIRURL

# URL where to look for cgis
CGIBINURL=#CGIBINURL
# CGIBINURL=/cgi-bin/# amrita sanskrit

# The httpd server executables directory
CGIDIR=#CGIDIR
# CGIDIR=/Library/WebServer/CGI-Executables/# amrita [Mac OSX]
# CGIDIR=/home/httpd/cgi-bin/# pushpak [WindowsNT]
# CGIDIR=/var/www/cgi-bin/# dhruva [Linux Redhat]
# CGIDIR=/var/www/cgi-bin/SKT/# sanskrit [Linux Ubuntu]

# Extension suffix of cgis
CGIEXT=#CGIEXT
# CGIEXT=# amrita sanskrit

# cgi name under which the lexicon index is installed on the server
CGIINDEX=sktindex$(CGIEXT)
# cgi name under which the search facility is installed on the server
CGIINDEXD=sktsearch$(CGIEXT)
# cgi name under which the declension engine is installed on the server
CGIDECL=sktdeclin$(CGIEXT)
# cgi name under which the conjugation engine is installed on the server
CGICONJ=sktconjug$(CGIEXT)
# cgi name under which the sanskrit lemmatizer is installed on the server
CGILEMMA=sktlemmatizer$(CGIEXT)
# cgi name under which the sanskrit reader is installed on the server
CGIREADER=sktreader$(CGIEXT)
# cgi name under which the sanskrit parser is installed on the server
CGIPARSER=sktparser$(CGIEXT)
# cgi name reserved for sanskrit tagger (* unused in current version *)
CGITAGGER=skttagger$(CGIEXT)
# cgi name under which the sanskrit sandhi segmenter is installed on the server
CGISANDHI=sktsandhier$(CGIEXT)
# cgi name under which the sanskrit tagging summarizer is installed on the server
CGIGRAPH=sktgraph$(CGIEXT)
# cgi name under which the sanskrit tagging summarizer is installed on the server
CGIGRAPH2=sktgraph2$(CGIEXT)
# cgi name under which the user aid for unknown chunks is installed on the server
CGIUSER=sktuser$(CGIEXT)
# CGI name under which the corpus manager is installed on the server.
CGIMANAGER = sktcorpus$(CGIEXT)
# CGI name under which the program that enriches the corpus is installed
# on the server.
CGISAVECORPUS = savecorpus$(CGIEXT)
# CGI name under which the program that creates a corpus subdirectory is
# installed on the server.
CGIMKDIRCORPUS = mkdircorpus$(CGIEXT)

# what mouse action to use for viewing lemmatization
MOUSEACTION=#MOUSEACTION
# MOUSEACTION='CLICK'#amrita

# The web server home page (reserved for server administrator)
# SERVERPAGE=/Library/WebServer/Documents/index.html.fr # amrita [Mac OSX]
# SERVERPAGE=/var/www/html/sanskrit/index.html # quincy [Linux, virtual server]
# SERVERPAGE=/var/www/html/index.html # dhruva [Linux, direct server]

# Customisation of SCL platform interface - obsolete
# SCLURL=#SCLURL
# SCLINSTALLDIR=#SCLINSTALLDIR
# OUTPUTFONT=#OUTPUTFONT
# TEMPAREA=#TEMPAREA

#################### Customization End ######################################

##########
# Macros #
##########

# System sources packages

# CORE is needed by all other packages - as well as the ZEN library
# GRAM is needed to generate the Sanskrit Heritage Engine
# WEB is needed to create the web pages and cgi-bin executables

# Les packages de modules - Tous dans la bibliothèque ML
# Linked to the ZEN library (generic Ocaml computational linguistic library)

# UTIL utilities for ML folder
UTIL=ML/Makefile $(ML_COPYRIGHT) ML/.ocamlinit ML/.depend

# CORE package - utilities, transducers, sanskrit and french lexers, dico spec
DISTR_CORE=ML/control.ml ML/dico.mli ML/version.ml ML/date.ml ML/install.ml \
ML/canon.ml ML/transduction.ml ML/encode.ml ML/order.ml ML/chunker.ml \
ML/sanskrit.mli ML/sanskrit.ml ML/skt_lexer.ml \
ML/dir.mli ML/dir.ml
CORE=$(DISTR_CORE) ML/paths.ml ML/data.ml

# GRAM package - phonetics, morphology, segmentation and tagging engines
GRAM=ML/index.ml ML/phonetics.ml ML/int_sandhi.ml ML/morphology.mli \
ML/naming.ml ML/inflected.mli ML/inflected.ml ML/sandhi.ml \
ML/sandhier.ml ML/pada.ml ML/nouns.mli ML/nouns.ml ML/conj_infos.mli \
ML/verbs.mli ML/verbs.ml ML/parts.ml ML/automaton.ml ML/automata.ml \
ML/make_automaton.ml ML/make_preverb_automaton.ml ML/automata_vector.mli \
ML/make_transducers.ml ML/morpho_string.ml ML/morpho.ml ML/declension.ml \
ML/conjugation.ml ML/indexer.ml ML/indexerd.ml ML/phases.ml ML/lemmatizer.ml \
ML/auto.mli ML/load_transducers.ml ML/dispatcher.mli ML/dispatcher.ml \
ML/segmenter.ml ML/load_morphs.ml ML/lexer.mli ML/lexer.ml \
ML/rank.ml ML/scl_parser.ml ML/reader.ml ML/parser.ml ML/constraints.mli \
ML/constraints.ml ML/multilingual.ml ML/paraphrase.mli ML/paraphrase.ml \
ML/bank_lexer.ml ML/checkpoints.ml ML/graph_segmenter.ml ML/graph_segmenter2.ml ML/interface.mli ML/interface2.mli \
ML/interface.ml ML/interface2.ml ML/user_aid.ml ML/reset_caches.ml ML/restore_caches.ml \
ML/params.mli ML/params.ml ML/make_xml_data.ml ML/segmenter_auxi.ml ML/make_word_freq.ml ML/make_trans_freq.ml 

# WEB package - HTML, HTTP, CGI ad-hoc utilities for Web interface
WEB=ML/html.ml ML/web.ml ML/css.ml ML/cgi.ml ML/morpho_html.ml ML/chapters.ml \
ML/mk_index_page.ml ML/mk_grammar_page.ml ML/mk_reader_page.ml \
ML/mk_sandhi_page.ml ML/mk_corpus_page.ml ML/morpho_scl.ml 

# TREE package - tree bank manager and syntax analyser - deprecated
TREE=ML/stemmer.ml ML/parse_tree.ml ML/parse_apte.ml ML/tag_tree.ml \
ML/tag_apte.ml

# CORPUS package - corpus manager
CORPUS = ML/corpus.mli ML/corpus.ml ML/web_corpus.mli ML/web_corpus.ml	\
	ML/corpus_manager.mli ML/corpus_manager.ml			\
	ML/corpus_manager_cgi.ml ML/save_corpus_cgi.ml			\
	ML/mkdir_corpus_cgi.ml ML/mk_corpus.ml

DEBUG= ML/debug.ml

# Historical versions of the segmenter, tagger and reader with single phase
OBSOLETE_ML=ML/segmenter1.ml ML/tagger1.ml ML/reader1.ml ML/tagger.ml \
ML/nyaaya.ml ML/mk_nyaaya_page.ml ML/regression.ml regression_lexer.ml \
ML/patch_auto.ml # awful hack for patching automata structures - now unused

# Modules of all software packages are in library ML (besides the ZEN library)
ML=$(UTIL) $(CORE) $(GRAM) $(WEB) $(TREE) $(LEGAL) $(CORPUS) $(DEBUG)

# Directory STAT contains a few log and regression files like regression_template
# Also files mw_exc.txt and mw_index_txt_file.txt for Monier-Williams alignment
STAT=STAT

# dynamic statistics such as current regression file
VAR=VAR

# System documentation
DOC=DOC/doc.ps DOC/doc.html DOC/doc.pdf
# documentation source # needs ocamlweb and hevea to create documentation
DOCSOURCE=DOC/docintro DOC/ocamlweb.sty DOC/lexer10.dot DOC/lexer17.dot DOC/lexer40.dot
# Site entry page and XML entry page
SITESOURCE=SITE/site_entry_page SITE/xml_entry_page SITE/goldendict_entry_page
SITEPAGE_FR=SITE/index.fr.html
SITEPAGE_EN=SITE/index.en.html
SITEPAGES=$(SITEPAGE_FR) $(SITEPAGE_EN)
PORTALPAGE_FR=SITE/portal.fr.html
PORTALPAGE_EN=SITE/portal.en.html
PORTALPAGES=$(PORTALPAGE_FR) $(PORTALPAGE_EN)
FAQPAGE_FR=SITE/faq.fr.html
FAQPAGE_EN=SITE/faq.en.html
FAQPAGES=$(FAQPAGE_FR) $(FAQPAGE_EN)
MANUAL=SITE/manual.html
XMLPAGE=SITE/xml.html
FAQ=SITE/faq.html
PORTAL=SITE/portal.html
GOLD=SITE/gold.html
GOLDEN=SITE/goldendict.html
ABREVS=SITE/abrevs.pdf
ROBOTS=SITE/robots.txt # currently disabled to allow Google access

# Goldendict data banks are now distributed from sanskrit.inria.fr
#GOLDENDICT=SITE/Heritage_du_sanskrit_san-fra.tar.gz SITE/Declension-heritage_du_sanskrit_san-eng.tar.gz SITE/Grammar-heritage_du_sanskrit_san-eng.tar.gz SITE/mw-heritage_du_sanskrit_san-eng.tar.gz

WEBSOURCES=$(PORTAL) $(FAQ) $(ABREVS) $(GOLDEN) $(MANUAL) $(XMLPAGE)
ALLWEBSOURCES=$(SITESOURCE) $(WEBSOURCES)
# Sources of morphology documents
DATASOURCE=$(DATA)/titn.tex $(DATA)/titpn.tex $(DATA)/titr.tex $(DATA)/titp.tex \
$(DATA)/tita.tex $(DATA)/titb.tex $(DATA)/titf.tex $(DATA)/titi.tex \
$(DATA)/titv.tex $(DATA)/tity.tex $(DATA)/titc.tex \
$(XMLDOC)/SL_morph.dtd $(XMLDOC)/WX_morph.dtd \
$(DATA_LICENSES) $(DATA)/Makefile
# All data sources
SOURCE=$(DOCSOURCE) $(DATASOURCE) $(ALLWEBSOURCES)

# Miscellaneous documentation
DOCS=DOC/sanskrit.pdf DOC/wsc.pdf DOC/tagger.pdf DOC/wcre.pdf DOC/coling.pdf \
DOC/Mumbai.pdf DOC/Brown.pdf DOC/IWRIDL.pdf DOC/COLING_2012.pdf DOC/WSC13.pdf
DOC_ML=DOC/Heritage_Platform.pdf

# Automata databases for use by the Sanskrit Engine
# Imported from Heritage_Resources:
INFLECTED=$(DATA)/nouns.rem $(DATA)/roots.rem $(DATA)/preverbs.rem \
$(DATA)/lopas.rem $(DATA)/pronouns.rem $(DATA)/parts.rem $(DATA)/peris.rem \
$(DATA)/lopaks.rem $(DATA)/indecls.rem $(DATA)/abstvaa.rem $(DATA)/absya.rem \
$(DATA)/iics.rem $(DATA)/piics.rem $(DATA)/ifcs.rem $(DATA)/iivs.rem \
$(DATA)/iifcs.rem $(DATA)/auxi.rem $(DATA)/voca.rem $(DATA)/invs.rem \
$(DATA)/inftu.rem $(DATA)/kama.rem $(DATA)/avyayais.rem $(DATA)/avyayafs.rem \
$(DATA)/auxiinv.rem $(DATA)/auxik.rem $(DATA)/auxiick.rem $(DATA)/partvocs.rem \
$(DATA)/indifcs.rem $(DATA)/vocaf.rem

SANDHIS=$(DATA)/sandhis.rem $(DATA)/sandhis_pv.rem $(DATA)/sandhis_ph.rem \
$(DATA)/sandhis_id.rem 

DHATUS=$(DATA)/roots_infos.rem $(DATA)/roots_usage.rem 
KRIDS=$(DATA)/unique_kridantas.rem $(DATA)/lexical_kridantas.rem

# Synthesized at make time:
TRANSDUCERS=DATA/transducers.rem # DATA/transducers2.rem # Z local DATA
# All are installed in the server area at make install
AUTOMATA=$(INFLECTED) $(SANDHIS) $(DHATUS) $(KRIDS) $(TRANSDUCERS) 

# roots_infos.rem is used at run time for generating abs and ger of verbs
# roots_usage.rem is used at run time by Dispatcher.validate
# sandhis_id.rem is used at run time by Segmenter
# lexical_kridantas.rem is used at run time by the loading of inflected.cmx
# by cgis declension and conjugation

# Persistent Ocaml values files stored in DICO dir for indexing purposes
DICOREMS=entries.rem defs.rem dummies.rem
# data files for MW linking
DATAMW=$(DATA)/mw_exceptions.rem $(DATA)/mw_index.rem $(DATA)/guess_index.rem

# cache related files in $(SERVERPUBLICDIR)$(DATA)
CACHES=cache.txt cache.rem cachei.rem transca.rem transcai.rem
CACHEI=cachei.rem transcai.rem

# Linguistic resources: Sanskrit morphology documents

PDF_MORPHOLOGY=$(DATA)/nouns.pdf $(DATA)/roots.pdf $(DATA)/parts.pdf \
$(DATA)/indecls.pdf $(DATA)/final.pdf # enormous, useless, deprecated

SL_XML_MORPHOLOGY=$(XMLDOC)/SL_morph.xml
SL_XML_DTD=$(XMLDOC)/SL_morph.dtd 
WX_XML_MORPHOLOGY=$(XMLDOC)/WX_morph.xml
WX_XML_DTD=$(XMLDOC)/WX_morph.dtd
XML_LICENCE=$(XMLDOC)/LICENSES/LGPLLR.pdf
XML_MORPHOLOGY=$(SL_XML_MORPHOLOGY).gz $(SL_XML_DTD) $(WX_XML_MORPHOLOGY).gz \
$(WX_XML_DTD) $(XML_LICENCE)

###########
# Scripts #
###########

# Sanskrit Heritage Platform site construction; release with "make release"
all: 
	test -e $(ZEN) && echo "Zen toolkit detected" && exit 0 \
|| echo "You should first install the Zen library at $(ZEN)" && exit 1
	cd $(ZEN) && $(MAKE) 
	test -e $(DATA) && echo "Heritage_Resources detected" && exit 0 \
|| echo "You should first install Heritage_Resources at $(DATA)" && exit 1
	test -f $(SERVERPUBLICDIR)DATA/cache.txt && echo "cold install" || $(MAKE) cold
	ln -sf $(ZEN) ZEN
	cp -Rp $(HERITAGE) . # local copy of DICO from Resources/DICO
	cp -Rp $(MW) . # local copy of MW
#	cd ML && $(MAKE) depend # reset dependencies (might be partial subset)
	test -e ML/SCLpaths.ml && echo "SCL config detected" \
|| cp SETUP/dummy_SCLpaths.ml ML/SCLpaths.ml
	cd ML && $(MAKE) test_version 
	ML/test_stamp
	mkdir -p DATA # local storage for transducers and MW links
	cd ML && $(MAKE) make_transducers
	$(MAKE) transducers
	cd ML && $(MAKE) # make engine (testing the data stamp)
	$(MAKE) web_services # then all Web services
#	cd ML && $(MAKE) make_word_freq
	$(MAKE) word_freq
#	cd ML && $(MAKE) make_trans_freq
	$(MAKE) trans_freq

# When master Makefile SETUP/MMakefile has been changed, do manually:
new:
	./configure
	$(MAKE) all

# After updating installation parameters above, the python script configure
# regenerates Makefile from SETUP/MMakefile and executes "make configuration"
configuration:
	(cat $(ML_COPYRIGHT) ; \
echo "(* Do not edit by hand - generated by configuration script - see main Makefile *)"; \
echo 'value platform = "$(PLATFORM)"'; \
echo 'and default_transliteration = "$(TRANSLIT)"'; \
echo 'and default_lexicon = "$(LEXICON)"'; \
echo 'and default_display_font = "$(DISPLAY)"'; \
echo 'and zen_install_dir = "$(ZEN)"'; \
echo 'and skt_install_dir = "$(SKTINSTALLDIR)"'; \
echo 'and skt_resources_dir = "$(SKTRESOURCES)"'; \
echo 'and public_skt_dir = "$(SERVERPUBLICDIR)"'; \
echo 'and skt_dir_url = "$(SKTDIRURL)"'; \
echo 'and server_host = "$(SERVERHOST)"'; \
echo 'and remote_server_host = "$(REMOTESERVERHOST)"'; \
echo 'and cgi_dir_url = "$(CGIBINURL)"'; \
echo 'and cgi_index = "$(CGIINDEX)"'; \
echo 'and cgi_indexd = "$(CGIINDEXD)"'; \
echo 'and cgi_lemmatizer = "$(CGILEMMA)"'; \
echo 'and cgi_reader = "$(CGIREADER)"'; \
echo 'and cgi_parser = "$(CGIPARSER)"'; \
echo 'and cgi_tagger = "$(CGITAGGER)"'; \
echo 'and cgi_decl = "$(CGIDECL)"'; \
echo 'and cgi_conj = "$(CGICONJ)"'; \
echo 'and cgi_sandhier = "$(CGISANDHI)"'; \
echo 'and cgi_graph = "$(CGIGRAPH)"'; \
echo 'and cgi_graph2 = "$(CGIGRAPH2)"'; \
echo 'and cgi_user_aid = "$(CGIUSER)"'; \
echo 'and cgi_corpus_manager = "$(CGIMANAGER)"'; \
echo 'and cgi_save_corpus = "$(CGISAVECORPUS)"'; \
echo 'and cgi_mkdir_corpus = "$(CGIMKDIRCORPUS)"'; \
echo 'and mouse_action = "$(MOUSEACTION)";') > ML/paths.ml
	$(MAKE) version

version:
	(cat $(ML_COPYRIGHT); \
echo "(* Generated by make version - see main Makefile *)"; \
echo "value version=\"$(VERSION)\" and version_date=\"$(DATE)\";") > ML/version.ml

transducers: 
	ML/make_transducers 
	
word_freq:
	#ML/make_word_freq
	cd ML && $(MAKE) make_word_freq
	ML/make_word_freq $(DATA)/comp_freq.txt > $(DATA)/comp_freq_max.rem
	ML/make_word_freq $(DATA)/pada_freq.txt > $(DATA)/pada_freq_max.rem
	ML/make_word_freq $(DATA)/word_freq.txt > $(DATA)/word_freq_max.rem
	$(ZEN)/ML/dagify < $(DATA)/comp_freq_max.rem > $(DATA)/comp_freq.rem
	$(ZEN)/ML/dagify < $(DATA)/pada_freq_max.rem > $(DATA)/pada_freq.rem
	$(ZEN)/ML/dagify < $(DATA)/word_freq_max.rem > $(DATA)/word_freq.rem
	rm $(DATA)/comp_freq_max.rem
	rm $(DATA)/pada_freq_max.rem
	rm $(DATA)/word_freq_max.rem
	
trans_freq:
	#ML/make_trans_freq
	cd ML && $(MAKE) make_trans_freq
	ML/make_trans_freq $(DATA)/comp_trans_freq.txt $(DATA)/comp_trans_freq.rem
	ML/make_trans_freq $(DATA)/pada_trans_freq.txt $(DATA)/pada_trans_freq.rem

xml_data: 
	cd ML && $(MAKE) make_xml_data
	ML/make_xml_data -trans "WX" > $(WX_XML_MORPHOLOGY) 
	gzip -f $(WX_XML_MORPHOLOGY)
	ML/make_xml_data -trans "SL" > $(SL_XML_MORPHOLOGY) 
	gzip -f $(SL_XML_MORPHOLOGY)

full: $(ZEN)
	cd ML && $(MAKE) clean && $(MAKE) depend && $(MAKE) all
	$(MAKE) all
	$(MAKE) supplements

supplements:
	cd ML && $(MAKE) doc # requires installing ocamlweb

index.html: mk_index_page
	ML/mk_index_page

reader.html: mk_reader_page
	ML/mk_reader_page -en
	ML/mk_reader_page -fr

grammar.html: mk_grammar_page
	ML/mk_grammar_page

sandhi.html: mk_sandhi_page
	ML/mk_sandhi_page

corpus.html: mk_corpus_page
	ML/mk_corpus_page

style.css: ML/css
	ML/css

Makefile: SETUP/MMakefile
	./configure

## Following entry points make partial update/installation on the local server
## they need su privilege for writing in the server area

# beware - make web_services on server architecture after DICO before releasecgi
# necessary if mk_*_page.ml has been updated
web_services: # Will write localized site pages in DICO and export cgis
	cd ML && $(MAKE) cgis site_pages
	cp -p SITE/xml.html DICO

release: $(DICO) web_services releasecgi releaseMW releasedata releasedoc \
releasebook releasecorpus releasexml releasecourse 
# releasepdf disabled at present as bulky and un-finished
	echo "Version $(VERSION) of Sanskrit site released on $(SERVERHOST)"

releasecourse:
	make course

# if one does not rebuild morphologic resources with make scratch, this will
# just release the new software on the old data - convenient for debug/test.
releasecgi:
	mkdir -p $(CGIDIR)
	$(MAKE) grammar
	$(MAKE) indexers
	$(MAKE) stemmer
	$(MAKE) analyser
	$(MAKE) sandhi
	$(MAKE) corpus_manager
	$(MAKE) save_corpus
	$(MAKE) mkdir_corpus

abrevs:
	cp $(BOOK)/abrevs.pdf SITE # for documenting the Website with abbreviations

# This releases on the server the new lexical data base and Web resources
# must be done after releaseMW for links adjustments
releasedata: abrevs
	cp $(WEBSOURCES) $(SERVERPUBLICDIR)
	cp $(SITEPAGES) $(SERVERPUBLICDIR) # site main pages made by configure
#	cp $(GOLDENDICT) $(SERVERPUBLICDIR) # Goldendict version now separated
	if [ "$(LEXICON)" = "SH" ]; then			\
		cp $(SITEPAGE_FR) $(SERVERPUBLICDIR)index.html;	\
	else							\
		cp $(SITEPAGE_EN) $(SERVERPUBLICDIR)index.html;	\
	fi # default language from lexicon parameter
	cp -R $(DICO) $(SERVERPUBLICDIR) # hypertext Heritage dictionary
# so that cgis invocations in DICO pages are relocated consistently with config:
	cd $(SERVERPUBLICDIR) && for i in `ls DICO/*.html`; do (\
sed '1,$$s|!CGIDECL|$(CGIBINURL)$(CGIDECL)|g' < $$i > temp1; \
sed '1,$$s|!CGICONJ|$(CGIBINURL)$(CGICONJ)|g' < temp1 > temp2; \
sed '1,$$s|!CGIGRAPH|$(CGIBINURL)$(CGIGRAPH)|g' < temp2 > $$i; \
rm temp1 temp2 ); done
# more relocation for MW, waiting for better solution
	cd $(SERVERPUBLICDIR) && for i in `ls MW/*.html`; do (\
sed '1,$$s|!CGIDECL|$(CGIBINURL)$(CGIDECL)|g' < $$i > temp; \
sed '1,$$s|!CGICONJ|$(CGIBINURL)$(CGICONJ)|g' < temp > $$i; \
rm temp); done # NB: no citation in MW
	cp -p $(AUTOMATA) $(SERVERPUBLICDIR)DATA # Sanskrit Engine data
	cp -p $(DATAMW) $(SERVERPUBLICDIR)DATA # MW links
	cp -p $(SCRIPTS) $(SERVERPUBLICDIR)DICO # Javascript in DICO dir
	cp -p $(FREQS) $(SERVERPUBLICDIR)DATA # Frequency files in DATA dir
#	cp $(DOC_IMAGES) $(SERVERPUBLICDIR)IMAGES

releasecorpus:
# Copy the corpus in the server area.
	cp -R $(SKTCORPUS) $(SERVERPUBLICDIR)
# Make the corpus in the server area writable by CGIs.
	chown -R $(APACHE_USER):$(APACHE_GROUP) $(SERVERCORPUS)

BOOKPRINTS=$(BOOK)/Heritage.pdf $(BOOK)/abrevs.pdf

releasebook:
	cp $(BOOKPRINTS) $(SERVERPUBLICDIR)

releasexml: xml_data # Sanskrit morphology in XML copied from Data to Server
	mkdir -p $(SERVERPUBLICDIR)DATA/XML
	cp $(XML_MORPHOLOGY) $(SERVERPUBLICDIR)DATA/XML
# Following is disguising the dtds as txt file for display by the browser - ugly
	cd $(SERVERPUBLICDIR)DATA/XML && mv WX_morph.dtd WX_morph_dtd.txt
	cd $(SERVERPUBLICDIR)DATA/XML && mv SL_morph.dtd SL_morph_dtd.txt

releasepdf: pdfmorphology # very big - useless - deprecated
	cp $(PDF_MORPHOLOGY) $(SERVERPUBLICDIR)DATA/PDF

releaseMW:
	cp -Rp $(MW) $(SERVERPUBLICDIR) # MW pages linked to decl/conjug cgis

releasedoc:
	cp $(PORTALPAGES) $(SERVERPUBLICDIR) # portal pages made by configure
	cp $(PORTALPAGE_FR) $(SERVERPUBLICDIR)portal.html # compatibility default
	cp $(FAQPAGES) $(SERVERPUBLICDIR) # faq pages made by configure
	cp $(FAQPAGE_FR) $(SERVERPUBLICDIR)faq.html # compatibility default fr
	cp $(MANUAL) $(SERVERPUBLICDIR) # user's manual
	cp $(XMLPAGE) $(SERVERPUBLICDIR) # XML resources page
#	cp $(ROBOTS) $(SERVERPUBLICDIR) # robots permissions
	cp $(GOLD) $(SERVERPUBLICDIR) # Heritage's Hall of Fame
#	cp $(DOC_ML) $(SERVERPUBLICDIR)DOC # Not distributed anymore - useless
	cp -p DOC/transliterations.pdf $(SERVERPUBLICDIR)DOC

grammar: ML/declension ML/conjugation
	cp ML/declension $(CGIDIR)$(CGIDECL)
	cp ML/conjugation $(CGIDIR)$(CGICONJ)

stemmer: ML/lemmatizer
	cp ML/lemmatizer $(CGIDIR)$(CGILEMMA)

sandhi: ML/sandhier
	cp ML/sandhier $(CGIDIR)$(CGISANDHI)

analyser: ML/reader ML/parser ML/interface ML/interface2 ML/user_aid
#	cp ML/reader1cgi $(CGIDIR)$(CGIREADER)
	cp ML/reader $(CGIDIR)$(CGIREADER)
	cp ML/parser $(CGIDIR)$(CGIPARSER)
	cp ML/interface $(CGIDIR)$(CGIGRAPH)
	cp ML/interface2 $(CGIDIR)$(CGIGRAPH2)
	cp ML/user_aid $(CGIDIR)$(CGIUSER)
# following for corpus acquisition, invoked in Corpus_manager.add_sentence_form
	cp ML/mk_reader_page $(CGIDIR)skt_heritage # $(CGIINTERFACE)
# following is deprecated 
#	cp ML/tagger $(CGIDIR)$(CGITAGGER)

indexers: ML/indexer ML/indexerd
	cp ML/indexer $(CGIDIR)$(CGIINDEX)
	cp ML/indexerd $(CGIDIR)$(CGIINDEXD)

.PHONY: corpus_manager
corpus_manager: ML/corpus_manager
	cp $< $(CGIDIR)$(CGIMANAGER)

.PHONY: save_corpus
save_corpus: ML/save_corpus
	cp $< $(CGIDIR)$(CGISAVECORPUS)

.PHONY: mkdir_corpus
mkdir_corpus: ML/mkdir_corpus
	cp $< $(CGIDIR)$(CGIMKDIRCORPUS)

#### Version Management and Distribution are now managed by Git ####

#### Installation ####

install: #after distribution to host site: "./configure; make; sudo make install"
	SETUP/issudo.sh
	test -f $(SERVERPUBLICDIR)DATA/cache.txt && echo "cold install" || $(MAKE) cold
	cd $(SERVERPUBLICDIR)DATA; touch $(CACHES); chmod a+w $(CACHES)
	touch $(SKTINSTALLDIR)ML/best_sol.txt; chmod 666 $(SKTINSTALLDIR)ML/best_sol.txt
	$(MAKE) release
	ML/restore_caches

# for first installation, do "sudo make cold" before "sudo make install"
cold: # for first install
	mkdir -p $(SERVERPUBLICDIR)IMAGES
	mkdir -p $(SERVERPUBLICDIR)DATA
	mkdir -p $(SERVERPUBLICDIR)DOC
	cp -R $(IMAGES) $(SERVERPUBLICDIR)IMAGES
	cp -p $(SCRIPTS) $(SERVERPUBLICDIR)
	cd $(SERVERPUBLICDIR)DATA; touch $(CACHES); chmod a+w $(CACHES)
	$(MAKE) empty_caches
#	$(MAKE) install_counter # only for master site migration

empty_caches: ML/reset_caches # caution: will reset the caches
	ML/reset_caches

# reserved for master site
install_counter: counter
	cp -f SETUP/wwwcount2.5/bin/Count.cgi $(CGIDIR)
	mkdir -p $(SERVERPUBLICDIR)Counter/conf/
	cp -f SETUP/wwwcount2.5/count.cfg $(SERVERPUBLICDIR)Counter/conf
	rm -rf SETUP/wwwcount2.5

# Update of Amrita site page - reserved to webmaster
amrita_sitepage:
	cd /Library/WebServer/Documents/index.html.fr && cp -p SITE/amrita_server.index.html.fr index.html.fr

counter:
	cd SETUP && tar xzvf wwwcount2.5.tar.gz
	cd SETUP && ./counter.py
	cd SETUP/wwwcount2.5 && ./configure
	cd SETUP/wwwcount2.5 && make all

.PHONY: uninstall
uninstall:
	SETUP/issudo.sh
	rm -rf $(SERVERPUBLICDIR)* $(CGIDIR)*

.PHONY: reinstall
reinstall: uninstall
	$(MAKE) install

export SERVERCORPUS
.PHONY: export-corpus
export-corpus: # ???
	$(MAKE) -C $(SKTRESOURCES) commit-corpus

# saving corpus acquisitions - to be refined for incrementality
commit-corpus: 
	cp -Rp $(SERVERCORPUS) $(SKTRESOURCES)
# TODO: git add des nouvelles citations, git commit, git push

# server injection of COURSE, to do with su permission
course:
	mkdir -p $(SERVERPUBLICDIR)COURSE
	mkdir -p $(SERVERPUBLICDIR)COURSE/Lessons
	mkdir -p $(SERVERPUBLICDIR)COURSE/Images 
	mkdir -p $(SERVERPUBLICDIR)COURSE
#	cp -Rp $(SKTRESOURCES)COURSE $(SERVERPUBLICDIR)
# uncomment previous line and delete all following when proper organization 
	cp -p $(SKTRESOURCES)COURSE/Lessons/lesson1.fr.html $(SERVERPUBLICDIR)COURSE/Lessons/
	cp -p $(SKTRESOURCES)COURSE/Lessons/HST_*.html $(SERVERPUBLICDIR)COURSE/Lessons/
	cp -p $(SKTRESOURCES)COURSE/Lessons/lesson1.fr.html $(SERVERPUBLICDIR)COURSE/Lessons/index.html
	cp -p $(SKTRESOURCES)COURSE/Lessons/lesson1.en.html $(SERVERPUBLICDIR)COURSE/Lessons/
	cp -p $(SKTRESOURCES)COURSE/Images/* $(SERVERPUBLICDIR)COURSE/Images
	cp -p $(SKTRESOURCES)COURSE/Lessons/style.css $(SERVERPUBLICDIR)COURSE/Lessons/style.css


SAVED_VERSION=339b
save: # saving sources of Heritage_Platform (after make clean in ML)
	tar cvf ../ARCHIVE/Heritage_Platform_$(SAVED_VERSION).tar ML SITE JAVASCRIPT SETUP configure INSTALLATION DOC IMAGES README 
