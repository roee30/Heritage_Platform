#! /usr/bin/python

setup_dir="SETUP"
makefile_path="Makefile"
config_path="SETUP/config.txt"
config_link_path="SETUP/config"
config_version_path="SETUP/version.txt"
meta_makefile_path="SETUP/MMakefile"
site_entry_page_path="SITE/site_entry_page"
sitepage_en_path="SITE/index.en.html"
sitepage_fr_path="SITE/index.fr.html"
faq_page_path="SITE/faq.html"
faq_page_en_path="SITE/faq.en.html"
faq_page_fr_path="SITE/faq.fr.html"
portal_page_path="SITE/portal.html"
portal_page_en_path="SITE/portal.en.html"
portal_page_fr_path="SITE/portal.fr.html"
xml_entry_page_path="SITE/xml_entry_page"
xmlpage_path="SITE/xml.html"
goldendict_entry_path="SITE/goldendict_entry_page"
goldendict_path="SITE/goldendict.html"
meta_docintro_path="DOC/docintro"
docintro_path="DOC/docintro.tex"
makefile_keys=["TEMPLATE","PLATFORM","TRANSLIT","LEXICON","DISPLAY","WARN",
               "SERVERHOST","SERVERPUBLICDIR","SKTDIRURL","SKTRESOURCES",
               "CGIBINURL","CGIDIR","CGIEXT","MOUSEACTION"]
#"SCLURL","SCLINSTALLDIR","TEMPAREA","OUTPUTFONT",
counter_keys=["CAPTION"]
version_keys=["VERSION","DATE"]
TEMPLATE='#'
WARN='# WARNING - Produced from MMakefile by configure - Do not edit manually'

import sys,re,shutil,os,os.path,subprocess

def verif_config():
    if not os.path.exists(config_link_path):
        print "Error : symbolic link", config_link_path  ,"is missing"
        print "Please first create a symbolic link to your xxx_config.txt file."
        print """You can find examples of different configurations in
SETUP/CONFIGS directory."""
        exit(1)

def generate(config_path):
    # CONFIG FILE
    config = open (config_path,'r')
    config_content = config.read()
    config.close()
    config_pattern="([A-Z]*)='([^']*)'"
    items = {}
    items["TEMPLATE"]=TEMPLATE
    items["WARN"]=WARN
    for item in re.finditer(config_pattern, config_content):
        items[item.group(1)] = item.group(2)
    config_version = open (config_version_path, 'r')
    config_version_content = config_version.read()
    config_version.close()
    for item in re.finditer(config_pattern, config_version_content):
        items[item.group(1)] = item.group(2)    

    # MAKEFILE
    meta_makefile = open(meta_makefile_path)
    meta_makefile_content = meta_makefile.read()
    meta_makefile.close()
    for key in makefile_keys:
        meta_makefile_content = meta_makefile_content.replace('#'+key,items[key])
    meta_makefile_content = meta_makefile_content.replace('#SKTINSTALLDIR',os.getcwd()+"/")
    for key in version_keys:
        meta_makefile_content = meta_makefile_content.replace('#'+key,items[key])
    makefile = open(makefile_path,'w')
    makefile.write(meta_makefile_content)
    makefile.close()
    print makefile_path, "generated"

    # INDEX PAGE
    site_entry_page = open(site_entry_page_path,'r')
    site_entry_page_content = site_entry_page.read()
    site_entry_page.close()
    for key in counter_keys:
        site_entry_page_content = site_entry_page_content.replace('#'+key,items[key])
    for key in version_keys:
        site_entry_page_content = site_entry_page_content.replace('#'+key,items[key])

    # ENGLISH INDEX PAGE
    sitepage_en = open(sitepage_en_path,'w')
    sitepage_en_content = site_entry_page_content.replace('#LANG','en')   
    sitepage_en.write(sitepage_en_content)
    sitepage_en.close()
    print sitepage_en_path, "(en) generated"
    
    # FRENCH INDEX PAGE
    sitepage_fr = open(sitepage_fr_path,'w')
    sitepage_fr_content =  site_entry_page_content.replace('#LANG','fr')   
    sitepage_fr.write(sitepage_fr_content)
    sitepage_fr.close()
    print sitepage_fr_path, "(fr) generated"
    
    # FAQ PAGE
    faq_page = open(faq_page_path,'r')
    faq_page_content = faq_page.read()
    faq_page.close()

    # ENGLISH FAQ PAGE
    faq_page_en = open(faq_page_en_path,'w')
    faq_page_en_content = faq_page_content.replace('#LANG','en')   
    faq_page_en.write(faq_page_en_content)
    faq_page_en.close()
    print faq_page_en_path, "(en) generated"
    
    # FRENCH FAQ PAGE
    faq_page_fr = open(faq_page_fr_path,'w')
    faq_page_fr_content = faq_page_content.replace('#LANG','fr')   
    faq_page_fr.write(faq_page_fr_content)
    faq_page_fr.close()
    print faq_page_fr_path, "(fr) generated"
    
    # PORTAL PAGE
    portal_page = open(portal_page_path,'r')
    portal_page_content = portal_page.read()
    portal_page.close()

    # ENGLISH PORTAL PAGE
    portal_page_en = open(portal_page_en_path,'w')
    portal_page_en_content = portal_page_content.replace('#LANG','en')   
    portal_page_en.write(portal_page_en_content)
    portal_page_en.close()
    print portal_page_en_path, "(en) generated"
    
    # FRENCH PORTAL PAGE
    portal_page_fr = open(portal_page_fr_path,'w')
    portal_page_fr_content = portal_page_content.replace('#LANG','fr')   
    portal_page_fr.write(portal_page_fr_content)
    portal_page_fr.close()
    print portal_page_fr_path, "(fr) generated"
    
    # XML - obsolete, now managed by Resources
    xml_entry_page = open(xml_entry_page_path,'r')
    xml_entry_page_content = xml_entry_page.read()
    xml_entry_page.close()
    for key in version_keys:
        xml_entry_page_content = xml_entry_page_content.replace('#'+key,items[key])
    xmlpage = open(xmlpage_path,'w')
    xmlpage.write(xml_entry_page_content)
    xmlpage.close()
    print xmlpage_path, "generated"
    
    # GOLDEN DICT
    golden_entry_page = open(goldendict_entry_path,'r')
    golden_page_content = golden_entry_page.read()
    golden_entry_page.close()
    for key in version_keys:
        golden_page_content = golden_page_content.replace('#'+key,items[key])
    golden_page = open(goldendict_path,'w')
    golden_page.write(golden_page_content)
    golden_page.close()
    print goldendict_path, "generated"
    
    # TEX
    if os.path.exists(meta_docintro_path):
        meta_docintro = open(meta_docintro_path,'r')
        meta_docintro_content = meta_docintro.read()
        meta_docintro.close()
        for key in version_keys:
            meta_docintro_content = meta_docintro_content.replace('#'+key,items[key])
        docintro = open(docintro_path,'w')
        docintro.write(meta_docintro_content)
        docintro.close()
        print docintro_path, "generated"

def clean(): # lacks "SETUP/config.version.py" 
    if os.path.exists(makefile_path):
        os.remove(makefile_path)
        print makefile_path, "removed"
    if os.path.exists(sitepage_en_path):
        os.remove(sitepage_en_path)
        print sitepage_en_path, "removed"
    if os.path.exists(sitepage_fr_path):
        os.remove(sitepage_fr_path)
        print sitepage_fr_path, "removed"
    subprocess.call(["SETUP/config.version.py", "clean"])

# MAIN
verif_config()
if len(sys.argv) == 1:
    if os.path.exists(config_link_path):
        generate(config_link_path)
    else:
        generate(config_path)
    retcode = subprocess.call(["make", "configuration"])
elif sys.argv[1] == "light":
    if os.path.exists(config_link_path):
        generate(config_link_path)
    else:
        generate(config_path)
elif sys.argv[1] == "clean":
    clean()
